@startuml empleados
Alta: Estado = "A"
Baja: Estado = "B"

top to bottom direction
[*] --> Alta: GestorEmpleados.\ncrear\n(empleado Empleados)
Alta --> [*]: GestorEmpleados.\nborrar\n(empleado Empleados)
Baja --> [*]: GestorEmpleados.\nborrar\n(empleado Empleados)
Alta --> Baja: Empleados.\ndarBaja()
Baja --> Alta: Empleados.\ndarAlta()

@enduml

@startuml tareas
Pendiente: Estado = "P"
EnProceso: Estado = "E"
Finalizada: Estado = "F"
Pausada: Estado = "S"
Cancelada: Estado = "C"
Verificada: Estado = "V"


[*] --> Pendiente: LineasProducto.\ncrearTarea\n(tarea Tareas)
Pendiente --> [*]: LineasProducto.\nborrarTarea\n(tarea Tareas)
Cancelada --> [*]: LineasProducto.\nborrarTarea\n(tarea Tareas)
Pendiente --> EnProceso: Tareas.\nejecutar()
EnProceso --> Cancelada: Tareas.\ncancelar()
EnProceso --> Finalizada: Tareas.\nfinalizar()
EnProceso --> Pausada: Tareas.\npausar()
Finalizada --> EnProceso: Tareas.\nreanudar()
Pausada --> EnProceso: Tareas.\nreanudar()
Pausada --> Cancelada: Tareas.\ncancelar()
Cancelada --> EnProceso: Tareas.\nreanudar()
Finalizada --> Cancelada: Tareas.\ncancelar()
Finalizada --> Verificada: Tareas.\nverificar()
Verificada --> EnProceso: Tareas.\nreanudar()

@enduml

@startuml lineasProducto
Pendiente: Estado = "P"
Cancelada: Estado = "C"
NoUtilizada: Estado = "N"
Utilizada: Estado = "U"
PendienteDeProduccion: Estado = "F " AND
PendienteDeProduccion:(NOT this.\ntieneTareas() OR\n this.\ntodasTareasPendientes())
EnProduccion: Estado = "F" AND
EnProduccion: NOT this.\ntodasTareasPendientes()
Verificada: Estado = "V"
Reservada: Estado = "R"
Reservada: Venta tiene saldo
PendienteDeEntrega: Estado = "R"
PendienteDeEntrega: (IdRemito != null AND\n LineasVenta.dameVenta().obtenerSaldo() == 0 AND\n NOT this.dameRemito().estaCancelado()) OR\n NOT this.dameRemito().asociadoAVenta()
'Hicimos que estado = D para simplicidad en la busqueda.
Entregada: Estado = "D" 

top to bottom direction
[*] --> Pendiente: Presupuestos.\ncrearLineaPresupuesto\n(lp LineaPresupuesto)
[*] --> Pendiente: Ventas.\ncrearLineaVenta\n(lv LineasVenta)
[*] --> PendienteDeEntrega: Remitos.\ncrearLineaRemito\n(lr LineasRemito)
Pendiente --> [*]: Ventas.\nborrarLineaVenta\n(lv LineasVenta)
Pendiente --> [*]: Presupuestos.\nborrarLineaPresupuesto\n(lp LineaPresupuesto)
[*] --> PendienteDeProduccion: OrdenesProduccion.\ncrearLineaOrdenProduccion\n(lOP LineasOrdenProduccion)
PendienteDeProduccion --> [*]: OrdenesProduccion.\nborrarLineaOrdenProduccion\n(lOP LineasOrdenProduccion)
Pendiente --> Utilizada: GestorPresupuestos.\ntransformarPresupuestosEnVenta\n(presupuestos List<Presupuestos>)
Utilizada --> Pendiente: GestorVentas.\nborrar\n(venta Ventas)
Pendiente --> NoUtilizada: GestorPresupuestos.\ntransformarPresupuestosEnVenta\n(presupuestos List<Presupuestos>)
NoUtilizada --> Pendiente: GestorVentas.\nborrar\n(venta Ventas)
Utilizada --> NoUtilizada: Ventas.\nborrarLineaVenta\n(lv LineasVenta)
Pendiente --> Cancelada: LineasVenta.\ncancelar()
Pendiente --> PendienteDeProduccion: Ventas.\ngenerarOrdenProduccion\n(lv List<LineasVenta>)
Pendiente --> Reservada: Ventas.\ngenerarRemito\n(lv List<LineasVenta>)
Reservada --> Pendiente: Remitos.\ncancelar()
PendienteDeProduccion --> Cancelada: LineaOrdenProduccion.\ncancelar()
PendienteDeProduccion --> Cancelada: LineasVenta.\ncancelar()
PendienteDeProduccion --> Cancelada: LineasOrdenProduccion.\ncancelar()
PendienteDeProduccion --> EnProduccion: Tarea.\nejecutar()
EnProduccion --> Cancelada: LineaOrdenProduccion.\ncancelar()
EnProduccion --> Cancelada: LineasVenta.\ncancelar()
Reservada --> Cancelada: LineasVenta.\ncancelar()
EnProduccion --> Reservada: LineasProducto.\nverificar()
EnProduccion --> Verificada: LineasProducto.\nverificar()
Reservada --> PendienteDeEntrega: Ventas.\ncrearComprobante()
PendienteDeEntrega --> Entregada: Remitos.\nentregar()
PendienteDeEntrega --> [*]: Remitos.\nborrarLineaRemito\n(lr LineasRemito)
Entregada --> Cancelada: LineasVenta.\ncancelar()

@enduml

@startuml presupuestos

EnCreacion: Estado = "E"
Creado: Estado = "C"
Vendido: Estado = "V"
Expirado: Estado = "C" AND
Expirado: this.estaExpirado()

[*] --> EnCreacion: GestorPresupuestos.\ncrear\n(p Presupuestos)
EnCreacion --> Creado: this.\npasarACreado()
Creado --> Vendido: GestorPresupuestos.\ntransformarPresupuestosEnVenta\n(presupuestos List<Presupuestos>)
Creado --> Expirado
Vendido --> Creado: GestorVentas.\nborrar\n(venta Ventas)
EnCreacion --> [*]: GestorPresupuestos.\nborrar\n(p Presupuestos)
Creado --> [*]: GestorPresupuestos.\nborrar\n(p Presupuestos)

@enduml

@startuml ventas
top to bottom direction

EnCreacion: Estado = "E"
EnRevision: Estado = "R"
Cancelada: (Estado = "C" OR\n Estado = "R") AND
Cancelada: this.todasLineasCanceladas()
Pendiente: Estado = "C"
Entregada: Estado = "C" AND
Entregada: this.todasLineasNoCanceladasEntregadas()

[*] --> EnCreacion: GestorVentas.\ncrear\n(venta Ventas)
[*] --> EnCreacion: GestorPresupuestos.\ntransformarPresupuestosEnVenta\n(presupuestos List<Presupuestos>)
EnCreacion --> [*]: GestorPresupuestos.\nborrar\n(p Presupuestos)
EnCreacion -> EnRevision: this.\nchequearPrecios()
EnCreacion --> Pendiente: this.\nchequearPrecios()
EnRevision --> Cancelada: LineasVenta.\ncancelar()
EnRevision --> Pendiente: this.\nrevisar()
Pendiente --> Cancelada: LineasVenta.\ncancelar()
Pendiente --> Entregada: LineasRemito.\nentregar()

@enduml

@startuml ordenesProduccion
EnCreacion: Estado = "E"
Pendiente: Estado = "C"
Pendiente: Todas las lineas de producto no canceladas, no verificadas y no entregadas estan pendiente de produccion
EnProduccion: Estado = "C"
EnProduccion: Al menos una linea esta en produccion
Verificada: Estado = "C"
Verificada: Todas las lineas de producto no canceladas estan verificadas o entregadas
Cancelada: Estado = "C"
Cancelada: Todas las lineas de producto se encuentran canceladas

[*]--> EnCreacion: Desde Ventas
[*]--> EnCreacion: GestorOrdenesProduccion.\ncrear\n(op OrdenesProduccion)
EnCreacion --> [*]: GestorOrdenesProduccion.\nborrar\n(op OrdenesProduccion)
EnCreacion -->Pendiente: LineasOrdenProduccion.\ncancelar()
EnCreacion -->Pendiente: LineasProducto.\nverificar()
EnCreacion -->Pendiente: Remitos.\nentregar()
EnCreacion -->Pendiente: LineasProducto.\ncrearTarea()
EnProduccion -->Pendiente: LineasOrdenProduccion.\ncancelar()
EnProduccion -->Pendiente: LineasProducto.\nverificar()
EnProduccion -->Pendiente: Remitos.\nentregar()
EnProduccion -->Pendiente: LineasProducto.\ncrearTarea()
Pendiente --> EnProduccion: Tareas.\nejecutar()
Cancelada --> Pendiente: LineasOrdenProduccion.\nreanudar()
Cancelada --> EnProduccion: LineasOrdenProduccion.\nreanudar()
Pendiente --> Cancelada: LineasOrdenProduccion.\ncancelar()
EnProduccion --> Verificada: LineasProducto.\nverificar()
EnProduccion --> Verificada: LineasProducto.\ncancelar()
EnProduccion --> Verificada: Remitos.\nentregar()

'Revisar si hay vueltas desde Verificada a otro estado...

@enduml

@startuml remitos
top to bottom direction

EnCreacion: Estado = "E"
Creado: Estado = "C"
Entregado: Estado = "C"
Entregado: FechaEntrega != null
Cancelado: Estado = "B"

[*] --> EnCreacion: GestorRemitos.\ncrear\n(remito Remitos)
[*] --> EnCreacion: Ventas.\ngenerarRemito()
EnCreacion --> Creado: this.\npasarACreado()
Creado --> Entregado: Remitos.\nentregar()
Cancelado --> Creado: Remitos.\ndescancelar()
Creado --> Cancelado: Remitos.\ncancelar()
EnCreacion --> [*]: GestorRemitos.\nborrar\n(remito Remitos)
Creado --> [*]: GestorRemitos.\nborrar\n(remito Remitos)
@enduml